{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["spotifyWebApi","Spotify","App","params","getHashParams","state","loggedIn","access_token","savedAlbums","savedImageUrls","topTracks","topImageUrls","topArtists","topArtistsImageUrls","savedTracks","savedTracksImageUrls","setAccessToken","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getMySavedAlbums","then","res","setState","items","map","item","album","images","url","this","image","index","to","style","width","src","albumInfo","path","exact","render","className","name","artists","getMyTopTracks","trackInfo","getMySavedTracks","console","log","track","getMyRecentlyPlayedTracks","onClick","createTopLinks","createTopInfoRoutes","createSavedTracksLinks","createSavedTracksRoutes","createAlbumLinks","createSavedInfoRoutes","href","Component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.397db80e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\n\nconst spotifyWebApi = new Spotify();\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const params = this.getHashParams();\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      savedAlbums: [],\n      savedImageUrls: [],\n      topTracks: [],\n      topImageUrls: [],\n      topArtists: [],\n      topArtistsImageUrls: [],\n      savedTracks: [],\n      savedTracksImageUrls: []\n    }\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token)\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    // console.log(hashParams)\n    return hashParams;\n  }\n\n  getMySavedAlbums() {\n    spotifyWebApi.getMySavedAlbums()\n      .then(res => {\n        // console.log(res)\n        this.setState({\n          savedAlbums: res.items,\n          savedImageUrls: res.items.map(item => {\n            return item.album.images[0].url\n          }),\n        })\n      })\n  }\n\n  createAlbumLinks() {\n    // console.log(this.state)\n    let albumLinkArray = this.state.savedImageUrls.map((image, index) => {\n      return <Link to={`/${index}`}><img style={{ width: '10vw' }} src={image}></img></Link>\n    })\n    return albumLinkArray\n  }\n\n  createSavedInfoRoutes() {\n    // console.log(this.state.albums)\n    let routeArray = this.state.savedAlbums.map((albumInfo, index) => {\n      return (\n        <Route path={`/${index}`} exact render={() => {\n          return (\n            <div className=\"popup\">\n            <p className=\"popup-text\">{albumInfo.album.name} - {albumInfo.album.artists[0].name}</p>\n            </div>\n          )\n        }}>\n        </Route>\n      )\n    })\n    return routeArray;\n  }\n\n  getMyTopTracks() {\n    spotifyWebApi.getMyTopTracks()\n      .then(res => {\n        // console.log(res)\n        this.setState({\n          topTracks: res.items,\n          topImageUrls: res.items.map(item => {\n            return item.album.images[0].url\n          })\n        })\n      })\n  }\n\n  createTopLinks() {\n    let linkArray = this.state.topImageUrls.map((image, index) => {\n      return <Link to={`/${index + 20}`}><img style={{ width: '10vw' }} src={image}></img></Link>\n    })\n    return linkArray\n  }\n\n  createTopInfoRoutes() {\n    // console.log(this.state.topTracks)\n    let routeArray = this.state.topTracks.map((trackInfo, index) => {\n      return (\n        <Route path={`/${index + 20}`} exact render={() => {\n          return (\n            <div className=\"popup\">\n              <p className=\"popup-text\">{trackInfo.album.name} - {trackInfo.album.artists[0].name}</p>\n            </div>\n          )\n        }}>\n        </Route>\n      )\n    })\n    return routeArray;\n  }\n\n  getMySavedTracks() {\n    spotifyWebApi.getMySavedTracks()\n      .then(res => {\n        console.log(res)\n        this.setState({\n          savedTracks: res.items,\n          savedTracksImageUrls: res.items.map(item => {\n            return item.track.album.images[0].url\n          })\n        })\n      })\n  }\n\n  createSavedTracksLinks() {\n    let linkArray = this.state.savedTracksImageUrls.map((image, index) => {\n      return <Link to={`/${index + 40}`}><img style={{ width: '10vw' }} src={image}></img></Link>\n    })\n    return linkArray\n  }\n\n  createSavedTracksRoutes() {\n    console.log(this.state.savedTracks)\n    let routeArray = this.state.savedTracks.map((trackInfo, index) => {\n      return (\n        <Route path={`/${index + 40}`} exact render={() => {\n          return (\n            <div className='popup'>\n              <p className=\"popup-text\">{trackInfo.track.album.name} - {trackInfo.track.album.artists[0].name}</p>\n            </div>\n          )\n        }}>\n        </Route>\n      )\n    })\n    return routeArray;\n  }\n\n  getMyRecentlyPlayed() {\n    spotifyWebApi.getMyRecentlyPlayedTracks()\n      .then(res => {\n        console.log(res)\n        // this.setState({\n        //   topArtists: res.items,\n        //   topArtistsImageUrls: res.items.map(item => {\n        //     return item.images[1].url\n        //   })\n        // })\n      })\n  }\n\n  render() {\n    if (this.state.loggedIn) {\n\n      return (\n        <div className=\"App\">\n          <button onClick={() => {\n            this.getMySavedAlbums()\n            this.getMyTopTracks()\n            this.getMySavedTracks()\n            // this.getMyRecentlyPlayed()\n          }}>\n            Record Covers!\n          </button>\n          <div>\n            <Router>\n              {this.createTopLinks()}\n              {this.createTopInfoRoutes()}\n              {this.createSavedTracksLinks()}\n              {this.createSavedTracksRoutes()}\n              {this.createAlbumLinks()}\n              {this.createSavedInfoRoutes()}\n            </Router>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className='App'>\n          <a href=\"http://arch.finityllc.com:8888/\">\n            <button>Login to Spotify</button>\n          </a>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}